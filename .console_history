1.0 / nil.to+f
1.0 / nil.to_f
0.0 / 0.0
0.0 / 100
0.0 / 0
0 / 0.0
1.0 / 0
RabbitReplay::Config
RabbitReplay.configure do
:notifier => 'foo'
RabbitReplay.configure do |config|
config.notifier = 'foo'
RabbitReplay.config
props = {:foo => 'bar'}
props.merge(:bat => 'naz')
    message = RabbitReplay::Message.last
    message.last_replay_at
    message = RabbitReplay::Message.new
    message.replay_successful?
Message
{}.keys
{}.keys.present?
{}.keys.empty?
require 'rabbit_replay'
RabbitReplay::Message.new
      def start_date
        Date.today.beginning_of_month
      def end_date
        Date.today.end_of_month
      def days_in_month
        (end_date - start_date).days
days_in_month
    (params.keys && YUBI_KEYS).inject{|hash, key| hash[key] = params[key].gsub(" ",""); hash}
YUBI_KEYS = [:yubi_key_public, :yubi_key_private, :yubi_key_aes]
params = {:yubi_key_aes => '123', :foo => 'bar'}
    (params.keys & YUBI_KEYS).inject{|hash, key| hash[key] = params[key].gsub(" ",""); hash}
  def extracted_yubi_pairs_from(params)
    (params.keys & YUBI_KEYS).inject({}) {|hash, key| hash[key] = params[key].gsub(" ",""); hash}
  end
params = {:yubi_key_aes => '1 2 3', :foo => 'bar'}
extracted_yubi_pairs_from(params)
yy = _
params | yy
params.merge(yy)
params = {:foo => 'bar'}
params[:id] && 1 == 0 || "trouble"
params[:id].present?  && 1 == 0 || "trouble"
    module ScopesAndPersistsModel
      def self.included(base)
        base.extend ClassMethods
        base.send(:before_fiter, :scope_model,    {:except => [:index]})
        base.send(:before_fiter, :persist_model,  {:only => [:create, update]})
      def persist_model(params)
        scoped_model.update_attributes(params[symbolized_model_name])
      def handle_errors_on(action)
        scoped_model.errors.present? && render(action)
      def symbolized_model_name
        base_model.name.downcase.to_sym
      def scope_model
        @scoped_model = params[:id] && base_model.where(:id => params[:id]).first || base_model.new(params[symbolized_model_name])
        instance_variable_set("@#{symbolized_model_name.to_s}", @scoped_model)
      module ClassMethods
        def scopes_and_persists(model_name)
          @base_model = eval(model_name.classify)
        end
  @base_model 
      end
base.send(:before_fiter, :scope_model,    {:except => [:index]})
base.send(:before_fiter, :persist_model,  {:only => [:create, update]})
class Foo 
module ScopesAndPersistsModel
def self.included(base)
base.extend ClassMethods
def persist_model(params)
scoped_model.update_attributes(params[symbolized_model_name])
def handle_errors_on(action)
scoped_model.errors.present? && render(action)
def symbolized_model_name
base_model.name.downcase.to_sym
def scope_model
@scoped_model = params[:id] && base_model.where(:id => params[:id]).first || base_model.new(params[symbolized_model_name])
instance_variable_set("@#{symbolized_model_name.to_s}", @scoped_model)
module ClassMethods
def scopes_and_persists(model_name)
@base_model = eval(model_name.classify)
def base_model
@base_model 
class Bar; end
class Foo
include ScopesAndPersistsModel
scopes_and_persists :bar
end
require 'base64'
Base64.decode64('RGVjb2RlIHRoaXMgbWVzc2FnZSBmaXJzdCBmb3IgZGlubmVyIGFuZCBkcmlu\na3Mgd2l0aCB0aGUgdGVjaCB0ZWFtIGF0IEFwYXJ0bWVudHMuY29tLg==\n')
Base64.decode64("RGVjb2RlIHRoaXMgbWVzc2FnZSBmaXJzdCBmb3IgZGlubmVyIGFuZCBkcmlu\na3Mgd2l0aCB0aGUgdGVjaCB0ZWFtIGF0IEFwYXJ0bWVudHMuY29tLg==\n")
Zikaron.redis
require 'zikaron'
Zikaron.redis.ping
Zikaron.redis_exists?
exit
